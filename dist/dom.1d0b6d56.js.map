{"version":3,"sources":["dom.js"],"names":["window","dom","create","tagName","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","console","log","siblings","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","string","innerText","textContent","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","toggle","find","selector","scope","querySelectorAll","children","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"AAAA;;;;;;;;AAQA;AAEAA,MAAM,CAACC,GAAP,GAAa;AACT;AACAC,EAAAA,MAFS,kBAEFC;AAAQ;AAFN,IAEqB;AAC1B;AAEA;AACA,QAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAlB;AACAF,IAAAA,SAAS,CAACG,SAAV,GAAsBJ,OAAO,CAACK,IAAR,EAAtB,CAL0B,CAKY;AACtC;;AACA,WAAOJ,SAAS,CAACK,OAAV,CAAkBC,UAAzB;AACA;;;;;;AAMH,GAhBQ;AAiBTC,EAAAA,KAjBS,iBAiBHC,IAjBG,EAiBGC,KAjBH,EAiBU;AACf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,QAAjB,EAFe,CAEa;;AAC5BJ,IAAAA,IAAI,CAACK,UAAL,CAAgBC,YAAhB,CAA6BL,KAA7B,EAAoCD,IAAI,CAACO,WAAzC;AACA;AACH,GAtBQ;AAuBTC,EAAAA,MAvBS,kBAuBFR,IAvBE,EAuBIC,KAvBJ,EAuBW;AAChBD,IAAAA,IAAI,CAACK,UAAL,CAAgBC,YAAhB,CAA6BL,KAA7B,EAAoCD,IAApC;AACH,GAzBQ;AA0BTS,EAAAA,MA1BS,kBA0BFC,MA1BE,EA0BMV,IA1BN,EA0BY;AACjBU,IAAAA,MAAM,CAACC,WAAP,CAAmBX,IAAnB;AACH,GA5BQ;AA6BTY,EAAAA,IA7BS,gBA6BJZ,IA7BI,EA6BEU,MA7BF,EA6BU;AACfrB,IAAAA,GAAG,CAACmB,MAAJ,CAAWR,IAAX,EAAiBU,MAAjB,EADe,CACW;;AAC1BrB,IAAAA,GAAG,CAACoB,MAAJ,CAAWC,MAAX,EAAmBV,IAAnB,EAFe,CAEW;AAC7B,GAhCQ;AAiCTa,EAAAA,MAjCS,kBAiCFb,IAjCE,EAiCI;AACT;AACAA,IAAAA,IAAI,CAACK,UAAL,CAAgBS,WAAhB,CAA4Bd,IAA5B;AACA,WAAOA,IAAP,CAHS,CAGI;AAChB,GArCQ;AAsCTe,EAAAA,KAtCS,iBAsCHf,IAtCG,EAsCG;AACR;AACA;AACA;;AACA;;;AAGA,QAAMgB,KAAK,GAAG,EAAd;AACA;;;;;;;;AAQA;;AAEA;;AACA,QAAIC,CAAC,GAAGjB,IAAI,CAACF,UAAb;;AACA,WAAOmB,CAAP,EAAU;AACN;AACAD,MAAAA,KAAK,CAACE,IAAN,CAAW7B,GAAG,CAACwB,MAAJ,CAAWb,IAAI,CAACF,UAAhB,CAAX;AACAmB,MAAAA,CAAC,GAAGjB,IAAI,CAACF,UAAT,CAHM,CAGe;AACxB;;AACD,WAAOkB,KAAP,CAzBQ,CAyBM;AACjB,GAhEQ;;AAiET;;AACA;;AACA;;;;AAIAG,EAAAA,IAvES,gBAuEJnB,IAvEI,EAuEEoB,IAvEF,EAuEQC,KAvER,EAuEe;AACpB;AACA,QAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AACxBvB,MAAAA,IAAI,CAACwB,YAAL,CAAkBJ,IAAlB,EAAwBC,KAAxB,EADwB,CACQ;AACnC,KAFD,MAEO,IAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC/B,aAAOvB,IAAI,CAACyB,YAAL,CAAkBL,IAAlB,CAAP,CAD+B,CACC;AACnC;AACJ,GA9EQ;;AA+ET;;AACA;;;;AAIAM,EAAAA,IApFS,gBAoFJ1B,IApFI,EAoFE2B,MApFF,EAoFU;AACf;AACA;AACA,QAAIL,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AACxB;AACA,UAAI,eAAevB,IAAnB,EAAyB;AACrBA,QAAAA,IAAI,CAAC4B,SAAL,GAAiBD,MAAjB,CADqB,CACI;AAC5B,OAFD,MAEO;AACH3B,QAAAA,IAAI,CAAC6B,WAAL,GAAmBF,MAAnB,CADG,CACwB;AAC9B;AACJ,KAPD,MAOO,IAAIL,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC/B;AACA,UAAI,eAAevB,IAAnB,EAAyB;AACrB,eAAOA,IAAI,CAAC4B,SAAZ,CADqB,CACE;AAC1B,OAFD,MAEO;AACH,eAAO5B,IAAI,CAAC6B,WAAZ,CADG,CACsB;AAC5B;AACJ;AACJ,GAtGQ;;AAuGT;AACAC,EAAAA,IAxGS,gBAwGJ9B,IAxGI,EAwGE2B,MAxGF,EAwGU;AACf,QAAIL,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AACxBvB,MAAAA,IAAI,CAACL,SAAL,GAAiBgC,MAAjB;AACH,KAFD,MAEO,IAAIL,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC/B,aAAOvB,IAAI,CAACL,SAAZ;AACH;AACJ,GA9GQ;;AA+GT;;AACA;;;;;AAKAoC,EAAAA,KArHS,iBAqHH/B,IArHG,EAqHGoB,IArHH,EAqHSC,KArHT,EAqHgB;AACrB,QAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AACxB;AACA,aAAOvB,IAAI,CAAC+B,KAAL,CAAWX,IAAX,IAAmBC,KAA1B,CAFwB,CAGxB;AACH,KAJD,MAIO,IAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC/B,UAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC1B;AACA,eAAOpB,IAAI,CAAC+B,KAAL,CAAWX,IAAX,CAAP;AACH,OAHD,MAGO,IAAIA,IAAI,YAAYY;AAAO;AAA3B,QAAwC;AAC3C;AACA,cAAMC,MAAM,GAAGb,IAAf;;AACA,eAAK,IAAIc,GAAT,IAAgBD,MAAhB,EAAwB;AACpB;AACA;AACA;AACA;AACA;AACA;AACAjC,YAAAA,IAAI,CAAC+B,KAAL,CAAWG,GAAX,IAAkBD,MAAM,CAACC,GAAD,CAAxB;AACH;;AACD,iBAAOD,MAAP;AACH;AACJ;AACJ,GA7IQ;AA8ITE,EAAAA,KAAK,EAAE;AACH;AACAC,IAAAA,GAFG,eAECpC,IAFD,EAEOqC,SAFP,EAEkB;AACjBrC,MAAAA,IAAI,CAACsC,SAAL,CAAeF,GAAf,CAAmBC,SAAnB;AACH,KAJE;;AAKH;AACAxB,IAAAA,MANG,kBAMIb,IANJ,EAMUqC,SANV,EAMqB;AACpBrC,MAAAA,IAAI,CAACsC,SAAL,CAAezB,MAAf,CAAsBwB,SAAtB;AACH,KARE;AASHE,IAAAA,GATG,eASCvC,IATD,EASOqC,SATP,EASkB;AACjB,aAAOrC,IAAI,CAACsC,SAAL,CAAeE,QAAf,CAAwBH,SAAxB,CAAP;AACH;AAXE,GA9IE;AA2JTI,EAAAA,EA3JS,cA2JNzC,IA3JM,EA2JA0C,SA3JA,EA2JWC,EA3JX,EA2Je;AACpB3C,IAAAA,IAAI,CAAC4C,gBAAL,CAAsBF,SAAtB,EAAiCC,EAAjC;AACH,GA7JQ;AA8JTE,EAAAA,GA9JS,eA8JL7C,IA9JK,EA8JC0C,SA9JD,EA8JYC,EA9JZ,EA8JgB;AACrBzC,IAAAA,OAAO,CAACC,GAAR,WAAeuC,SAAf;AACA1C,IAAAA,IAAI,CAAC8C,mBAAL,CAAyBJ,SAAzB,EAAoCC,EAApC;AACH,GAjKQ;AAkKTI,EAAAA,MAlKS,kBAkKF/C,IAlKE,EAkKI0C,SAlKJ,EAkKeC,EAlKf,EAkKmB;AACxB3C,IAAAA,IAAI,CAAC4C,gBAAL,CAAsB,WAAtB,EAAmC,YAAW;AAC1C1C,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAH,MAAAA,IAAI,CAAC4C,gBAAL,CAAsBF,SAAtB,EAAiCC,EAAjC;AACA3C,MAAAA,IAAI,CAAC4C,gBAAL,CAAsB,SAAtB,EAAiC,YAAW;AACxC1C,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAH,QAAAA,IAAI,CAAC8C,mBAAL,CAAyBJ,SAAzB,EAAoCC,EAApC;AACH,OAHD;AAIH,KAPD;AAQH,GA3KQ;;AA4KT;;AACA;AACAK,EAAAA,IA9KS,gBA8KJC,QA9KI,EA8KMC,KA9KN,EA8Ka;AAClB;AACA,WAAO,CAACA,KAAK,IAAIzD,QAAV,EAAoB0D,gBAApB,CAAqCF,QAArC,CAAP;AACI;AACP,GAlLQ;AAmLTvC,EAAAA,MAnLS,kBAmLFV,IAnLE,EAmLI;AACT,WAAOA,IAAI,CAACK,UAAZ;AACH,GArLQ;AAsLT+C,EAAAA,QAtLS,oBAsLApD,IAtLA,EAsLM;AACX,WAAOA,IAAI,CAACoD,QAAZ;AACH,GAxLQ;AAyLThD,EAAAA,QAzLS,oBAyLAJ,IAzLA,EAyLM;AACX,WAAOqD,KAAK,CAACC,IAAN,CAAWtD,IAAI,CAACK,UAAL,CAAgB+C,QAA3B,EACFG,MADE,CACK,UAAAC,CAAC;AAAA,aAAIA,CAAC,KAAKxD,IAAV;AAAA,KADN,CAAP;AAEH,GA5LQ;AA6LTyD,EAAAA,IA7LS,gBA6LJzD,IA7LI,EA6LE;AACP,QAAIiB,CAAC,GAAGjB,IAAI,CAACO,WAAb;AACI;;AACJ,WAAOU,CAAC,IAAIA,CAAC,CAACyC,QAAF,KAAe,CAA3B,EAA8B;AAC1BzC,MAAAA,CAAC,GAAGA,CAAC,CAACV,WAAN;AACH;;AACD,WAAOU,CAAP;AACH,GApMQ;AAqMT0C,EAAAA,QArMS,oBAqMA3D,IArMA,EAqMM;AACX,QAAIiB,CAAC,GAAGjB,IAAI,CAAC4D,eAAb;AACI;;AACJ,WAAO3C,CAAC,IAAIA,CAAC,CAACyC,QAAF,KAAe,CAA3B,EAA8B;AAC1BzC,MAAAA,CAAC,GAAGA,CAAC,CAAC2C,eAAN;AACH;;AACD,WAAO3C,CAAP;AACH,GA5MQ;AA6MT4C,EAAAA,IA7MS,gBA6MJC,QA7MI,EA6MMnB,EA7MN,EA6MU;AACf,SAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACvC,MAA7B,EAAqCwC,CAAC,EAAtC,EAA0C;AACtCpB,MAAAA,EAAE,CAACqB,IAAH,CAAQ,IAAR,EAAcF,QAAQ,CAACC,CAAD,CAAtB;AACH;AACJ,GAjNQ;AAkNTE,EAAAA,KAlNS,iBAkNHjE,IAlNG,EAkNG;AACR,QAAMkE,IAAI,GAAG7E,GAAG,CAAC+D,QAAJ,CAAapD,IAAI,CAACK,UAAlB,CAAb;AACA,QAAI0D,CAAJ;;AACA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGG,IAAI,CAAC3C,MAArB,EAA6BwC,CAAC,EAA9B,EAAkC;AAC9B,UAAIG,IAAI,CAACH,CAAD,CAAJ,KAAY/D,IAAhB,EAAsB;AAClB;AACH;AACJ;;AACD,WAAO+D,CAAP;AACH;AA3NQ,CAAb","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["/* 实现的几个 DOM 接口\r\n** dom.create(`<div>hi</div>`) // 用于创建节点\r\n** dom.after(node, node2) // 用于向后追加兄弟节点\r\n// 原生的提供了一个兼容性不佳的实验性接口`ChildNode.after() MDN`\r\n** dom.before(node, node2) // 用于向前追加兄弟节点\r\n** dom.append(parent, child) // 用于创建子节点\r\n** dom.wrap(`<div></div>`) //  用于创建父节点\r\n*/\r\n// dom.create = function() {}\r\n\r\nwindow.dom = {\r\n    // create: function() {} // 可简化为\r\n    create(tagName /* 语义化 形参 */ ) {\r\n        // return document.createElement(tagName) // 不能创建带有结构的 HTML 元素`<div><span>1</span></div>`\r\n\r\n        // const container = document.createElement(\"div\")\r\n        const container = document.createElement(\"template\");\r\n        container.innerHTML = tagName.trim(); // 除去空格\r\n        // return container.children[0]\r\n        return container.content.firstChild;\r\n        /* 存在 不可识别元素(<td></td>)的 bug\r\n         ** <td</td>> 不能单独存在 只能放在<table></table> 里<tr></tr>或<tbody></tbody> 里，放在 div 里不符合 HTML 语法\r\n         ** 可以放任意元素，不出 bug 的标签是 <template></template>\r\n         ** <template></template> 是窜门用来容纳人以标签的\r\n         ** <template></template> 用template.content.firstChild拿到\r\n         */\r\n    },\r\n    after(node, node2) {\r\n        // 在后面插入节点，就相当于在此 node 后面的节点的前面插 // 必须调用父节点的 insertBefore() 方法\r\n        console.log(node.siblings); // null ?\r\n        node.parentNode.insertBefore(node2, node.nextSibling);\r\n        /* 判断 排除最后一个节点 没有下一个节点 null 也符合 */\r\n    },\r\n    before(node, node2) {\r\n        node.parentNode.insertBefore(node2, node);\r\n    },\r\n    append(parent, node) {\r\n        parent.appendChild(node);\r\n    },\r\n    wrap(node, parent) {\r\n        dom.before(node, parent); // 将要包裹的“父节点”先插到目标节点的前面\r\n        dom.append(parent, node); // 再把目标节点用 append 移至将要包裹的父节点的下面\r\n    },\r\n    remove(node) {\r\n        // node.remove() // IE 不支持 兼容性不好\r\n        node.parentNode.removeChild(node);\r\n        return node; // 仍然需要获取此节点的引用\r\n    },\r\n    empty(node) {\r\n        // 清空 node 里面的所有子元素\r\n        // node.innerHTML = ''\r\n        // const childNodes = node.childNodes 可以改写成以下的写法\r\n        /*\r\n         ** const {childNodes} = node // 解构赋值\r\n         */\r\n        const array = [];\r\n        /*\r\n         **    for (let i = 0; i < childNodes.length; i++) { // 不需要i++的循环就用 while 循环代替\r\n         **        console.log(childNodes)\r\n         **        console.log(childNodes.length)\r\n         **        dom.remove(childNodes[i]) // remove( nodes) 会实时改变 nodes 的长度每次减一 导致循环的长度不固定 出现 bug\r\n         **        array.push(childNodes[i])\r\n         **    }\r\n         */\r\n        //  不需要i++的循环就用 while 循环代替for 循环\r\n\r\n        /* 获取第一个子节点 并 push 进数组 */\r\n        let x = node.firstChild;\r\n        while (x) {\r\n            // 如果 x 存在\r\n            array.push(dom.remove(node.firstChild));\r\n            x = node.firstChild; // 第一个子节点已经移除 原先第二节点就变为现在的第一个节点\r\n        }\r\n        return array; // 仍然需要获取此节点的引用\r\n    },\r\n    /* 改 用于读写属性 */\r\n    /* 用判断 arguments 的个数来重载函数 */\r\n    /* 重载\r\n     ** 有三个形参时，就是设置；\r\n     ** 第二个形参时，就是读取\r\n     */\r\n    attr(node, name, value) {\r\n        // 组合\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(name, value); // 原生DOM setAttribute(name, value)\r\n        } else if (arguments.length === 2) {\r\n            return node.getAttribute(name); // 原生DOM getAttribute(name) 并返回值\r\n        }\r\n    },\r\n    /* 用于读/写文本内容 */\r\n    /* 重载\r\n     ** 有两个形参时，就是设置；\r\n     ** 第一个形参时，就是读取\r\n     */\r\n    text(node, string) {\r\n        // 设计模式 之 适配\r\n        // console.log('innerText' in node) //true\r\n        if (arguments.length === 2) {\r\n            /* 写 */\r\n            if (\"innerText\" in node) {\r\n                node.innerText = string; // IE // 会将节点原本的所有内容，包括标签全部改变\r\n            } else {\r\n                node.textContent = string; // Chrome/ Firefox // 会将节点原本的所有内容，包括标签全部改变\r\n            }\r\n        } else if (arguments.length === 1) {\r\n            /* 读 */\r\n            if (\"innerText\" in node) {\r\n                return node.innerText; // IE // 会将节点原本的所有内容，包括标签全部改变\r\n            } else {\r\n                return node.textContent; // Chrome/ Firefox // 会将节点原本的所有内容，包括标签全部改变\r\n            }\r\n        }\r\n    },\r\n    /* 用于读/写HTML内容 */\r\n    html(node, string) {\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = string;\r\n        } else if (arguments.length === 1) {\r\n            return node.innerHTML;\r\n        }\r\n    },\r\n    /* 用于修改style */\r\n    /* 重载\r\n     ** 第二个形参是对象时，就是设置；dom.style(div, {color: \"red\"})\r\n     ** 有三个形参时，也是设置；dom.style(div, 'color', 'red')\r\n     ** 第二个形参是字符串时，就是读取 dom.style(div, 'color')\r\n     */\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            // dom.style(div, \"color\", \"red\"')\r\n            return node.style[name] = value;\r\n            // node.style.name = value;\r\n        } else if (arguments.length === 2) {\r\n            if (typeof name === \"string\") {\r\n                // 读取 dom.style(div, 'color')\r\n                return node.style[name];\r\n            } else if (name instanceof Object /* true */ ) {\r\n                // dom.style(div, {color:'red'})\r\n                const object = name;\r\n                for (let key in object) {\r\n                    // 遍历读取所有对应的key\r\n                    // key: border | color | ···\r\n                    // node.style.border = ...\r\n                    // node.style.color = ...\r\n                    // 调用属性值 []方法 读取的时变量;点方法 读取的是字符串\r\n                    // node.style.key; // 字符串\r\n                    node.style[key] = object[key];\r\n                }\r\n                return object\r\n            }\r\n        }\r\n    },\r\n    class: {\r\n        /* 用于添加class */\r\n        add(node, className) {\r\n            node.classList.add(className)\r\n        },\r\n        /* 用于删除class */\r\n        remove(node, className) {\r\n            node.classList.remove(className)\r\n        },\r\n        has(node, className) {\r\n            return node.classList.contains(className)\r\n        }\r\n    },\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n    off(node, eventName, fn) {\r\n        console.log(`${eventName}取消事件`)\r\n        node.removeEventListener(eventName, fn)\r\n    },\r\n    toggle(node, eventName, fn) {\r\n        node.addEventListener(\"mousedown\", function() {\r\n            console.log(\"鼠标按下了\");\r\n            node.addEventListener(eventName, fn);\r\n            node.addEventListener(\"mouseup\", function() {\r\n                console.log(\"鼠标抬起了\");\r\n                node.removeEventListener(eventName, fn)\r\n            })\r\n        });\r\n    },\r\n    /* 查 */\r\n    /* scope 为查找的范围 节点对象 */\r\n    find(selector, scope) {\r\n        /* 如果有 scope 节点 就找 scope 里的；没有就找 document 里的 */\r\n        return (scope || document).querySelectorAll(selector)\r\n            /* 返回的是 NodeList 伪数组 取用加 NodeList[0] */\r\n    },\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    children(node) {\r\n        return node.children\r\n    },\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children)\r\n            .filter(n => n !== node)\r\n    },\r\n    next(node) {\r\n        let x = node.nextSibling\r\n            /* 排除文本节点 */\r\n        while (x && x.nodeType === 3) {\r\n            x = x.nextSibling\r\n        }\r\n        return x\r\n    },\r\n    previous(node) {\r\n        let x = node.previousSibling\r\n            /* 排除文本节点 */\r\n        while (x && x.nodeType === 3) {\r\n            x = x.previousSibling\r\n        }\r\n        return x\r\n    },\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    },\r\n    index(node) {\r\n        const list = dom.children(node.parentNode)\r\n        let i\r\n        for (i = 0; i < list.length; i++) {\r\n            if (list[i] === node) {\r\n                break\r\n            }\r\n        }\r\n        return i\r\n    }\r\n};"]}